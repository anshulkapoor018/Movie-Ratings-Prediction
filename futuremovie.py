from flask import Flask,render_template,request
import ga
import ib
import string
import json
import numpy as np
import random
from urllib2 import Request, urlopen

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('index.html') 

@app.route('/homepage')
def homepage():
    return render_template('homepage.html') 

@app.route('/charts')
def charts():
    return render_template('charts.html') 

@app.route('/about')
def about():
    return render_template('about.html')     

@app.route('/contact')
def contact():
    return render_template('contact.html')  

@app.route('/highchart_genre')
def highchart_genre():
    return render_template('highchart_genre.html')

@app.route('/highchart_wikistat')
def highchart_wikistat():
    return render_template('highchart_wikistat.html')     

@app.route('/highchart_imdb_rating')
def highchart_imdb_rating():
    return render_template('highchart_imdb_rating.html') 

@app.route('/highchart_tomatoUserMeter')
def highchart_tomatoUserMeter():
    return render_template('highchart_tomatoUserMeter.html') 

@app.route('/highchart_metascore')
def highchart_metascore():
    return render_template('highchart_metascore.html') 

@app.route('/highchart_productionHouse_avg')
def highchart_productionHouse_avg():
    return render_template('highchart_productionHouse_avg.html') 

@app.route('/highchart_productionHouse_max')
def highchart_productionHouse_max():
    return render_template('highchart_productionHouse_max.html') 

@app.route('/highchart_productionHouse_num')
def highchart_productionHouse_num():
    return render_template('highchart_productionHouse_num.html') 

@app.route('/movie', methods=['POST'])
def index():
    movie = request.form['movie']
    title =  movie.replace(" ","%20")
    a = 3
    #read weight
    f = open('weight.txt', 'rb')
    line = f.readline()
    w = [string.atof(s) for s in line.split(', ')]
    f.close()
    # build index
    index = ib.indexbuilder(w, 'csv_file.csv', 'index,csv')
    ib.write_index(index, index_file="index.csv")
    link = 'http://www.omdbapi.com/?i=&t=' + title +'&tomatoes=true'
    linkRequest = Request(link)
    try:
        linkResponse = urlopen(linkRequest)
        j = json.load(linkResponse)
    except:
        pass

    try:
        imdb_id= j['imdbID'].replace(",","")
        j['Title'] = j['Title'].replace(",","-")
        imdb_country=j['Country'].replace(",","")
        imdb_Actors = j['Actors'].replace(",","-")
        imdb_Director = j['Director'].replace(",","-")
        imdb_rating = j['imdbRating'].replace(",","")
        imdb_Writers = j['Writer'].replace(",","-")

    except Exception, e:
        print Exception, ":", e
    if a == 2:
        print 'Imdb_id doesn\'t exist'
    else:

        field = ['id', 'title', 'rating', 'directors', 'writers', 'actors', 'budget', 'gross']
        id = imdb_id.strip()
        print id
        rating =  imdb_rating.strip()
        print rating
        country = imdb_country.strip()
        print country
        dires = imdb_Director
        direList = dires.split("-")
        for director in direList:
            directors = director.strip()
            print directors


        writ = imdb_Writers
        writList = writ.split("-")
        for writer in writList:
            writers = writer.strip()
            print writers

        act=imdb_Actors
        actorList = act.split("-")
        for actor in actorList:
            actors = actor.strip()
            print actors

        if a == 2:
            budget = imdbapi['business']['budget'][0]['money'].encode("ascii", "ignore")
        else:
            budget = 'Unknown'
        gross = 'Unknown'
        count = ''

        if gross == 'unknown':
            gross = count
        imdb = {'id': id, 'rating': rating, 'title': title, 'directors': directors,
                'writers': writers, 'actors': actors, 'budget': budget, 'gross': gross}
        directors = []
        for s in imdb['directors']:
            if not ('more credit' in s):
                if index.has_key(s):
                    directors.append(string.atof(index[s][0]))  # if the person is known, give its value from index
                else:
                    directors.append(random.gauss(6.5, 0.764323))  # if the person is unknown, give it a random value generated by normal distribution
        writers = []
        for s in imdb['writers']:
            if not ('more credit' in s):
                if index.has_key(s):
                    writers.append(string.atof(index[s][0]))
                else:
                    writers.append(random.gauss(6.5, 0.764323))
        actors = []
        for s in imdb['actors']:
            if not ('more credit' in s):
                if index.has_key(s):
                    actors.append(string.atof(index[s][0]))
                else:
                    actors.append(random.gauss(7.0, 0.764323))
        director = np.mean(np.array(directors))
        writer = np.mean(np.array(writers))
        actor12 = 0
        actor34 = 0
        n12 = 0
        n34 = 0
        ao = 0
        nao = 0
        for i in range(len(actors)):
            if actors[i] != 0:
                if (i < 2):
                    actor12 += actors[i]
                    n12 += 1
                elif i < 4:
                    actor34 += actors[i]
                    n34 += 1
                else:
                    ao += actors[i]
                    nao += 1
        if n12 != 0:
            actor12 = actor12 / n12
        if n34 != 0:
            actor34 = actor34 / n34
        if nao != 0:
            ao = ao / nao

    return render_template('predict.html',title = movie,plot = j['Plot'],
                           result = ga.es([director, writer, actor12, actor34, ao], w),
                           actor = j['Actors'], director1 = j['Director'],
                           r = j['imdbRating'], p = j['Poster'],
                           a= j['Awards'])

if __name__ == '__main__':
    app.debug = True
    app.run()